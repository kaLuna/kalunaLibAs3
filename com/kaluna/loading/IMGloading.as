/*┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋┃http://www.spec5zigen.com     ::     mio_t@spec5zigen.com┃::::::::::::::::::::::::::::::::::::::::::::::::::::::::::┃画像ローディングクラス┃Ver.IMGloading.0.1┃Made.2008.10.14┃Development.Mio Takahata┃How to use ?┃	var imgload:IMGloading = new IMGloading(画像パス);┃	imgload.addEventListener(IMGloading.LOAD_COMPLETE,imgComplete);┃	imgload.addEventListener(IMGloading.LOAD_PROGRESS,imgProgress);┃	function imgComplete(e:Event){〜読み込み完了処理〜}┃	function imgProgress(e:Event){〜読み込み途中処理〜}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋*/package com.kaluna.loading{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.system.System;	import flash.system.Security;	public class IMGloading extends EventDispatcher  {		public static const LOAD_COMPLETE:String = "load_complete";		public static const LOAD_PROGRESS:String = "load_progress";		public static const LOAD_ERROR:String = "io_error";		public var imgLoader:Loader;		public var bitmap_data:BitmapData;		public var nowLoad:Number;		public var bitmap:Bitmap;		private var context:LoaderContext;				//コンストラクタ		public function IMGloading(url:String,security:Boolean = false) {			if(security){				Security.allowDomain("*");				Security.loadPolicyFile("http://" + url.split("/")[2] + "/crossdomain.xml");			}			context = new LoaderContext(security);			//URLLoader作成			imgLoader = new Loader();			imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onIMGloaded);			imgLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onIMGload);			imgLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onERROR);			//URL			var urlReq:URLRequest = new URLRequest(url);			//読み込み開始			imgLoader.load(urlReq,context);		}		//読み込み完了		private function onIMGloaded(e:Event):void {			imgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onIMGloaded);			imgLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onIMGload);			imgLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onERROR);			try {				bitmap = Bitmap(imgLoader.content);				bitmap.smoothing = true;				bitmap_data = new BitmapData(imgLoader.width,imgLoader.height);//bitmap.bitmapData;				bitmap_data.draw(imgLoader);				imgLoader = null;				//カスタムイベントを配信する				dispatchEvent(new Event(LOAD_COMPLETE));			} catch (err:TypeError) {				trace(err.message);			}		}		//読み込み開始		private function onIMGload(e:ProgressEvent):void {			//読み込みパーセント			nowLoad = Math.round((e.bytesLoaded/e.bytesTotal)*100);			//カスタムイベントを配信する			dispatchEvent(new Event(LOAD_PROGRESS));		}		private function onERROR(io:IOErrorEvent):void {			trace("LOAD ERROR:"+io);			//カスタムイベントを配信する			dispatchEvent(new IOErrorEvent(LOAD_ERROR));			imgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onIMGloaded);			imgLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onIMGload);			imgLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onERROR);		}		//BMPオブジェクトを返す（他のクラスからのアクセスに対応）		public function getIMG():BitmapData{			return bitmap_data;		}		public function getBMP():Bitmap{			return bitmap;		}		public function getLoader():Loader{			return imgLoader;		}		public function getParcent():Number{			return nowLoad/100;		}		//BMPオブジェクトの削除		public function rmIMG():void{			trace("画像バルス");			bitmap_data.dispose();			bitmap_data = null;			bitmap = null;		}	}}