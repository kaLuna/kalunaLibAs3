/*┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋┃http://kaluna.jp     ::     mio@kaluna.jp┃::::::::::::::::::::::::::::::::::::::::::::::::::::::::::┃SWFローディングクラス┃Ver.SWFloading.0.1┃Made.2009.6.25┃Development.Mio Takahata┃How to use ?┃	var swfload:SWFloading = new SWFloading(SWFパス);┃	swfload.addEventListener(SWFloading.LOAD_COMPLETE,swfComplete);┃	swfload.addEventListener(SWFloading.LOAD_PROGRESS,swfProgress);┃	function swfComplete(e:Event){〜読み込み完了処理〜}┃	function swfProgress(e:Event){〜読み込み途中処理〜}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╋*/package com.kaluna.loading{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.system.System;	public class SWFloading extends EventDispatcher  {		public static const LOAD_COMPLETE:String = "load_complete";		public static const LOAD_PROGRESS:String = "load_progress";		public static const LOAD_ERROR:String = "io_error";		public var swfLoader:Loader;		public var nowLoad:Number;		public var mc:MovieClip;						//コンストラクタ		public function SWFloading(url:String) {			//URLLoader作成			swfLoader = new Loader();			swfLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onSWFloaded);			swfLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onSWFload);			swfLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onERROR);			//URL			var urlReq:URLRequest = new URLRequest(url);			//読み込み開始			swfLoader.load(urlReq);		}		//読み込み完了		private function onSWFloaded(e:Event):void {			//カスタムイベントを配信する			swfLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onSWFloaded);			swfLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onSWFload);			swfLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onERROR);			try {				mc = new MovieClip();				mc = swfLoader.content as MovieClip;				trace("読み込み完了",mc.width,mc.height);				//カスタムイベントを配信する				dispatchEvent(new Event(LOAD_COMPLETE));			} catch (err:TypeError) {				trace(err.message);			}		}		//読み込み開始		private function onSWFload(e:ProgressEvent):void {			//読み込みパーセント			nowLoad = Math.round((e.bytesLoaded/e.bytesTotal)*100);			//カスタムイベントを配信する			dispatchEvent(new Event(LOAD_PROGRESS));		}		private function onERROR(io:IOErrorEvent):void {			trace("LOAD ERROR:"+io);			//カスタムイベントを配信する			dispatchEvent(new Event(LOAD_ERROR));			swfLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onSWFloaded);			swfLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onSWFload);			swfLoader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onERROR);		}		public function rmSWF():void{			swfLoader.unloadAndStop();			swfLoader = null;			mc = null;		}		//ムービークリップオブジェクトを返す（他のクラスからのアクセスに対応）		public function getSWF():MovieClip{			return mc;		}	}}