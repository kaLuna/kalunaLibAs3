package com.kaluna.movie{	import caurina.transitions.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	public class flvPlayer extends Sprite  {		private var flvPath:String;		private var w:uint;		private var h:uint;		private var connect:NetConnection;		private var netstream:NetStream;		private var video:Video;		private var autoPly:Boolean;		private var vol:SoundTransform;		public function flvPlayer(){					}		public function start(str:String,wd:uint,ht:uint):void{			flvPath = str;			w = wd;			h = ht;			init();		}		private function init():void{				addEventListener(Event.REMOVED_FROM_STAGE , onRemovedFromStage);								// NetConnectionを作成				connect = new NetConnection();				connect.connect(null);								// NetStreamを作成				netstream = new NetStream(connect);				netstream.bufferTime = 2;								// Videoを作成				video = new Video();				video.width = w;				video.height = h;				video.attachNetStream(netstream);								// FLVの再生				netstream.play(str);								// この記述を必ず入れておかないとonMetaDataエラーが発生する				netstream.client = {};				netStream.addEventListener (IOErrorEvent.IO_ERROR,URLLoaderIOErrorFunc);				netstream.addEventListener (NetStatusEvent.NET_STATUS ,URLLoaderProgressFunc);								//ボリュームを作成				vol = new SoundTransform(1); //デフォルト値 0〜1				netstream.soundTransform = vol;								addChild(video);		}		private function URLLoaderIOErrorFunc (event : IOErrorEvent) {			trace ("ファイル入出力のエラー");		}		private function URLLoaderProgressFunc (event : NetStatusEvent) {			switch(event.info.code){				case "NetStream.Buffer.Empty":					trace("バッファが空になったので中断");					break;				case "NetStream.Buffer.Full":						trace("バッファを満たしたので再生");					break;				case "NetStream.Buffer.Flush":					trace("ストリーム読み込みが終了した");					break;				case "NetStream.Play.Start":					trace("再生の開始");					break;				case "NetStream.Play.Stop":					trace("再生の停止");					break;				case "NetStream.Play.StreamNotFound":					trace("FLV ファイルが見つからない");					break;				case "NetStream.Play.Failed":					trace("その他のエラー");					break;				case "NetStream.Seek.Failed":					trace("シークが失敗した");					break;				case "NetStream.Seek.InvalidTime":					trace("有効ではないシーク時間を指定した");					trace("指定可能なシーク時間 : " + event.info.details);					break;				case "NetStream.Seek.Notify":					trace("シーク操作を完了できた");					break;				default:					trace("その他のイベントコード:" + event.info.code);			}		}		function onRemovedFromStage(evt : Event):void{			netstream.close();			connect = null;			video = null;			netstream = null;			trace("バルス！");			removeEventListener(Event.REMOVED_FROM_STAGE , onRemovedFromStage);		}		//getter/setter		public function get getVol():Number{			return netstream.soundTransform.volume;		}		public function set setVol(v:Number):void{			vol = new SoundTransform(v); //デフォルト値 0〜1			netstream.soundTransform = vol;		}		public function set fileSet(str:String):void{			filePath = str;		}		public function set buffer(t:uint):void{			netstream.bufferTime = t;		}	}}