package com.kaluna.movie{	import caurina.transitions.*;		import flash.display.*;	import flash.events.*;	import flash.media.*;	import flash.net.*;	public class flvPlayer extends Sprite  {		private var flvPath:String;		private var w:uint;		private var h:uint;		private var connect:NetConnection;		private var netstream:NetStream;		private var video:Video;		private var autoPly:Boolean;		private var vol:SoundTransform;		private var totaltime:Number;		private var nowtime:Number;		private var metaObj:Object;		private var playMc:MovieClip;		private var resumeMc:MovieClip;		private var pauseMc:MovieClip;		private var stopMc:MovieClip;		private var seekMc:MovieClip;		private var seekHand:MovieClip;		private var bgMc:MovieClip;		private var flg:Boolean;		private var loop:Boolean;		private var auto:Boolean;		private var defVol:Number;		private var hdFlg:Boolean;		public function flvPlayer(){		}		public function init(str:String,wd:uint,ht:uint,aut:Boolean = false,vlm:Number=1):void{			flg = false;			flvPath = str;			w = wd;			h = ht;			loop = true;			auto = aut;			defVol = vlm;			hdFlg = false;			start();		}		private function start():void{				addEventListener(Event.REMOVED_FROM_STAGE , onRemovedFromStage);												// NetConnectionを作成				connect = new NetConnection();				connect.connect(null);								// NetStreamを作成				netstream = new NetStream(connect);				netstream.bufferTime = 2;				netstream.checkPolicyFile = true;								//ボリュームを作成				vol = new SoundTransform(defVol); //デフォルト値 0〜1				netstream.soundTransform = vol;								// Videoを作成				video = new Video();				video.width = w;				video.height = h;				video.attachNetStream(netstream);								// FLVの再生				netstream.play(flvPath);				if(!auto) netstream.pause();								// この記述を必ず入れておかないとonMetaDataエラーが発生する				metaObj = new Object();				metaObj.onMetaData = function(param:Object){					trace("総時間 : " + param.duration + "秒");					totaltime = Math.floor(param.duration);					trace("幅 : " + param.width);					trace("高さ : " + param.height);					trace("ビデオレート : " + param.videodatarate + "kb");					trace("フレームレート : " + param.framerate + "fps");					trace("コーデックＩＤ : " + param.videocodecid);				};				netstream.client = metaObj;				netstream.addEventListener (IOErrorEvent.IO_ERROR,URLLoaderIOErrorFunc);				netstream.addEventListener (NetStatusEvent.NET_STATUS ,URLLoaderProgressFunc);												addChild(video);		}		private function URLLoaderIOErrorFunc (event : IOErrorEvent) {			trace ("ファイル入出力のエラー");		}		private function URLLoaderProgressFunc (event : NetStatusEvent) {			switch(event.info.code){				case "NetStream.Buffer.Empty":					trace("バッファが空になったので中断");					break;				case "NetStream.Buffer.Full":						trace("バッファを満たしたので再生");					break;				case "NetStream.Buffer.Flush":					trace("ストリーム読み込みが終了した");					break;				case "NetStream.Play.Start":					trace("再生の開始");					break;				case "NetStream.Play.Stop":					trace("再生の停止");					if(loop) netstream.play(flvPath);										break;				case "NetStream.Play.StreamNotFound":					trace("FLV ファイルが見つからない");					break;				case "NetStream.Play.Failed":					trace("その他のエラー");					break;				case "NetStream.Seek.Failed":					trace("シークが失敗した");					break;				case "NetStream.Seek.InvalidTime":					trace("有効ではないシーク時間を指定した");					trace("指定可能なシーク時間 : " + event.info.details);					break;				case "NetStream.Seek.Notify":					trace("シーク操作を完了できた");					break;				default:					trace("その他のイベントコード:" + event.info.code);			}		}		public function setSize(w:Number,h:Number):void{			video.width = w;			video.height = h;		}		private function onRemovedFromStage(evt : Event):void{			this.removeEventListener(Event.ENTER_FRAME,chkTime);			netstream.close();			connect = null;			video = null;			netstream = null;			trace("バルス！");			removeEventListener(Event.REMOVED_FROM_STAGE , onRemovedFromStage);		}		//コントローラ		public function plyClk(e:MouseEvent = null):void{			netstream.resume();			stopMc.visible = true;			playMc.visible = false;		}		public function stpClk(e:MouseEvent = null):void{			netstream.pause();			playMc.visible = true;			stopMc.visible = false;		}		private function clsClk(e:MouseEvent):void{			this.removeEventListener(Event.ENTER_FRAME,chkTime);			netstream.close();		}		//getter		public function get getVol():Number{			return netstream.soundTransform.volume;		}		public function get getSeekPer():Number{		//小数第２位まで			return netstream.time/totaltime;		}		//setter		public function set setLoop(v:Boolean):void{			loop = v;		}		public function set setVol(v:Number):void{			vol = new SoundTransform(v); //デフォルト値 0〜1			netstream.soundTransform = vol;		}		public function set setPath(str:String):void{			flvPath = str;		}		public function set setBuffer(t:uint):void{			netstream.bufferTime = t;		}		public function set playBtn(btn:MovieClip):void{			playMc = btn;			btn.buttonMode = true;			btn.addEventListener(MouseEvent.CLICK,plyClk);			if(auto) playMc.visible = false;		}		public function set stopBtn(btn:MovieClip):void{			stopMc = btn;			btn.buttonMode = true;			btn.addEventListener(MouseEvent.CLICK,stpClk);		}		public function set closeBtn(btn:MovieClip):void{			stopMc = btn;			btn.buttonMode = true;			btn.addEventListener(MouseEvent.CLICK,clsClk);		}		public function set seekTime(st:Number):void{			netstream.seek(st);		}		public function set seekPer(st:Number):void{			netstream.seek((totaltime/100) * st);		}		public function set seekMark(seekHd:MovieClip):void{			seekHand = seekHd;			seekHd.buttonMode = true;			hdFlg = true;			seekHd.addEventListener(MouseEvent.MOUSE_DOWN,msDn);		}		public function seekSet(seekMc:MovieClip,bgMc:MovieClip):void{			this.seekMc = seekMc;			this.seekMc.mouseEnabled = false;			this.bgMc = bgMc;			this.bgMc.buttonMode = true;			this.bgMc.addEventListener(MouseEvent.MOUSE_DOWN,msDn);			this.addEventListener(Event.ENTER_FRAME,chkTime);		}		private function chkTime(e:Event):void{			this.seekMc.scaleX = getSeekPer;			if(hdFlg) seekHand.x = seekMc.width;			if(1 <= getSeekPer) seekTime = 0;		}		private function msDn(e:MouseEvent):void{			flg = true;			stage.addEventListener(MouseEvent.MOUSE_UP,msUp);			stage.addEventListener(MouseEvent.MOUSE_MOVE,msMv);			this.removeEventListener(Event.ENTER_FRAME,chkTime);			netstream.pause();			this.seekMc.width = bgMc.mouseX;			if(hdFlg) seekHand.x = bgMc.mouseX;			seekPer = ((bgMc.mouseX/bgMc.width) * 100);		}		private function msUp(e:MouseEvent):void{			flg = false;			if(!playMc.visible) netstream.resume();			this.addEventListener(Event.ENTER_FRAME,chkTime);			stage.removeEventListener(MouseEvent.MOUSE_MOVE,msMv);			stage.removeEventListener(MouseEvent.MOUSE_UP,msUp);		}		private function msMv(e:MouseEvent):void{			if(flg){				this.seekMc.width = bgMc.mouseX;				if(hdFlg) seekHand.x = bgMc.mouseX;				seekPer = ((bgMc.mouseX/bgMc.width) * 100);			}		}	}}