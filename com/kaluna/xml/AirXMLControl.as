package  com.kaluna.xml{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.EventDispatcher;	import com.kaluna.xml.XMLloading;	import flash.filesystem.*;	public class AirXMLControl extends EventDispatcher{		public static const LOAD_COMPLETE:String = "load_complete";		public static const WRITE_COMPLETE:String = "write_complete";		public static const DELETE_COMPLETE:String = "delete_complete";		public static const IOERR_COMPLETE:String = "ioerror_complete";		private var xmlLoad:XMLloading;		private var _prefs:File;		private var _prefsXML:XML;		private var _localXML:XML;		private var _xmlFile:String;		public function AirXMLControl(xmlFile:String) {			// constructor code			_xmlFile = xmlFile;			_prefs = File.applicationStorageDirectory;//アプリ格納ディレクトリ			_prefs = _prefs.resolvePath(xmlFile);			// 存在したら設定内容をウィンドウに反映		}		public function init():void{			if(_prefs.exists) loadPrefs();			else loadLocal();		}		/*			環境設定ファイル読み込み			*/		private function loadPrefs():void{			var stream:FileStream = new FileStream();			try{				stream.open(_prefs, FileMode.READ);				_prefsXML = XML(stream.readUTFBytes(stream.bytesAvailable));			}catch(e:Error){				trace(e.message);			}			finally{				stream.close();				trace("読み込み");				loadLocal();				//dispatchEvent(new Event(LOAD_COMPLETE));			}		}		/*			ローカルXML読み込み		*/		private function loadLocal():void{			xmlLoad = new XMLloading(_xmlFile);			xmlLoad.addEventListener(XMLloading.LOAD_COMPLETE,dummyComp);		}		private function dummyComp(e:Event):void{			xmlLoad.removeEventListener(XMLloading.LOAD_COMPLETE,dummyComp);			_localXML = xmlLoad.getXML();			if(!_prefs.exists) _prefsXML = xmlLoad.getXML();			dispatchEvent(new Event(LOAD_COMPLETE));		}		/*			環境設定ファイル書き込み		*/		public function savePrefs(_xml:XML):void{			_prefsXML = _xml;			var outputString:String = '<?xml version="1.0" encoding="utf-8"?>\n';			outputString += _prefsXML.toXMLString();			outputString = outputString.replace(/\n/g, File.lineEnding);						var stream:FileStream = new FileStream();			try{				stream.open(_prefs, FileMode.WRITE);				stream.writeUTFBytes(outputString);			}catch(e:Error){				trace(e.message);			}			finally{				stream.close();				trace("保存");				dispatchEvent(new Event(WRITE_COMPLETE));			}		}		public function delXML():void{			if(_prefs.exists){				_prefs.deleteFileAsync();				_prefs.addEventListener(Event.COMPLETE,delComp);				_prefs.addEventListener(IOErrorEvent.IO_ERROR,errComp);			}		}		private function delComp(e:Event):void{			_prefs.removeEventListener(Event.COMPLETE,delComp);			_prefs.removeEventListener(IOErrorEvent.IO_ERROR,errComp);			dispatchEvent(new Event(DELETE_COMPLETE));		}		private function errComp(e:Event):void{			_prefs.removeEventListener(Event.COMPLETE,delComp);			_prefs.removeEventListener(IOErrorEvent.IO_ERROR,errComp);			dispatchEvent(new Event(IOERR_COMPLETE));		}		public function getXML(m:String = "resolve"):XML{			var dataXML:XML = new XML();			if(m=="resolve") dataXML = _prefsXML;			else if(m=="local") dataXML = _localXML;			return dataXML;		}	}}