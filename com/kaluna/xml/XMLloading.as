package com.kaluna.xml{	import flash.events.EventDispatcher;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.system.System;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.system.Security;	import flash.events.SecurityErrorEvent;	public class XMLloading extends EventDispatcher  {		public static const LOAD_COMPLETE:String = "load_complete";		public static const LOAD_PROGRESS:String = "load_progress";		public static const LOAD_ERROR:String = "load_error";		public var xmlLoader:URLLoader;		public var newXML:XML;		public var nowLoad:Number;						//コンストラクタ		public function XMLloading(url:String, isUnicode:Boolean = true,security:Boolean = false) {			//URLLoader作成			xmlLoader = new URLLoader();			xmlLoader.dataFormat = URLLoaderDataFormat.TEXT;			xmlLoader.addEventListener(Event.COMPLETE, onXMLloaded);			xmlLoader.addEventListener(ProgressEvent.PROGRESS, onXMLload);			xmlLoader.addEventListener(IOErrorEvent.IO_ERROR,onError);			xmlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,onSecError);						if(security) Security.loadPolicyFile(url);			//URL			var urlReq:URLRequest = new URLRequest(url);			//Unicode以外ならばtrue			System.useCodePage = ! isUnicode;			//読み込み開始			xmlLoader.load(urlReq);		}		//読み込み完了		private function onXMLloaded(e:Event):void {			try {				//XMLオブジェクトに変換する				newXML = new XML(xmlLoader.data);				//カスタムイベントを配信する				dispatchEvent(new Event(LOAD_COMPLETE));				trace("XML完了");			} catch (err:TypeError) {				trace(err.message);			}			rmListener();		}		//読み込み開始		private function onXMLload(e:ProgressEvent):void {			//読み込みパーセント			nowLoad = Math.round((e.bytesLoaded/e.bytesTotal)*100);			//カスタムイベントを配信する			dispatchEvent(new Event(LOAD_PROGRESS));		}		private function onError(e:IOErrorEvent):void{			dispatchEvent(new Event(LOAD_ERROR));			rmListener();			trace("読み込みエラー");		}		private function onSecError(e:SecurityErrorEvent):void{			dispatchEvent(new Event(LOAD_ERROR));			rmListener();			trace("セキュリティエラー");		}		private function rmListener():void{			xmlLoader.removeEventListener(Event.COMPLETE, onXMLloaded);			xmlLoader.removeEventListener(ProgressEvent.PROGRESS, onXMLload);			xmlLoader.removeEventListener(IOErrorEvent.IO_ERROR,onError);			xmlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,onSecError);		}		//XMLオブジェクトを返す（他のクラスからのアクセスに対応）		public function getXML():XML{			return newXML;		}	}}